/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.RegistrarRole;

import University.CourseSchedule.CourseLoad;
import University.CourseSchedule.CourseOffer;
import University.CourseSchedule.CourseSchedule;
import University.CourseSchedule.SeatAssignment;
import University.Department.Department;
import University.Persona.Faculty.FacultyProfile;
import University.Persona.Registrar.RegistrarProfile;
import University.Persona.Student.StudentProfile;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jingyangwang
 */
public class StudentRegistrationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StudentRegistrationJPanel
     */
    JPanel CardSequencePanel;
    RegistrarProfile registrarProfile;
    
    public StudentRegistrationJPanel(JPanel CardSequencePanel,RegistrarProfile rp) {
        
        this.CardSequencePanel = CardSequencePanel;
        registrarProfile = rp;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        comboStudentId = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentRegistration = new javax.swing.JTable();
        btnEnroll = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 204));

        btnBack.setText("<<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        lblTitle.setText("Student Registration Management");

        comboStudentId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Adam Rollen", "David Hannan", "Emily Johnson", "Ethan Clark", "Olivia Martinez", "Liam Thompson", "Sophia Hernandez", "Noah Robinson" }));
        comboStudentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboStudentIdActionPerformed(evt);
            }
        });

        tblStudentRegistration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course Number", "Course Name", "Credits", "Faculty ", "Capacity", "Status", "Semester"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStudentRegistration);

        btnEnroll.setText("Enroll a course for student");

        btnDrop.setText("Drop a course for student");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addGap(142, 142, 142))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnEnroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDrop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(60, 60, 60))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle)
                .addGap(34, 34, 34)
                .addComponent(comboStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(btnEnroll)
                .addGap(29, 29, 29)
                .addComponent(btnDrop)
                .addContainerGap(73, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        //remove current jpanel
        CardSequencePanel.remove(this);
        
        CardLayout layout = (CardLayout)CardSequencePanel.getLayout();
        //display the previous one
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboStudentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboStudentIdActionPerformed
        // TODO add your handling code here:
        String selectedStudent = (String) comboStudentId.getSelectedItem();
        populateTable();
    }//GEN-LAST:event_comboStudentIdActionPerformed

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        //define selected row
        int selectedRow = tblStudentRegistration.getSelectedRow();
       
        //pop-up warning message before delete 
        if(selectedRow >= 0) {           
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to drop the selected course?","Warning", JOptionPane.INFORMATION_MESSAGE);
               //delete the row if it is confirmed 
               if(dialogResult == JOptionPane.YES_OPTION){
                    
                    String selectedName = (String) comboStudentId.getSelectedItem();
                    Department department = registrarProfile.getDepartment();
                    StudentProfile student = department.getStudentDirectory().findStudent(selectedName);
                    CourseLoad courseLoad = student.getCurrentCourseLoad();
                    
                    CourseOffer selectedCourseOffer = (CourseOffer)tblStudentRegistration.getValueAt(selectedRow, 0);
                    
                    SeatAssignment seatAssignment = courseLoad.getSeatAssignment(selectedCourseOffer);
                    if (seatAssignment != null) {
                        seatAssignment.drop(); 
                        JOptionPane.showMessageDialog(null, "Course dropped successfully!");
                    }
            //refresh table
            populateTable(); 
        }
        
        }else{
            //pop-up message if no row is being selected
            JOptionPane.showMessageDialog(null, "Please select a course to drop.","information",JOptionPane.INFORMATION_MESSAGE);
            return;
        }
      
        
    }//GEN-LAST:event_btnDropActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JComboBox<String> comboStudentId;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblStudentRegistration;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        
    //get the model table and clean i 
    DefaultTableModel model = (DefaultTableModel) tblStudentRegistration.getModel();
    model.setRowCount(0);  
    
    Department department = registrarProfile.getDepartment();
    if (department == null) return; 
    
    String selectedStudent = (String) comboStudentId.getSelectedItem();
    StudentProfile sp = department.getStudentDirectory().findStudent(selectedStudent);
    if (sp == null) return;

    for (SeatAssignment sa : sp.getCourseList()) {
        CourseOffer co = sa.getCourseOffer();
        Object[] row = new Object[7];
        row[0] = co;
        row[1] = co.getSubjectCourse().getCourseName();
        row[2] = co.getCreditHours();
        //MH 10/26 - Fixes because ID was changed to UniversityID
        row[3] = co.getFacultyProfile().getPerson().getUniversityID();
        row[4] = co.getSeatCount();
        row[5] = sa.isEnrolled() ? "Enrolled" : "Dropped"; 
        row[6] = sa.getCourseOffer().getCourseSchedule().getSemester();

        model.addRow(row);
    }
}


    
}
