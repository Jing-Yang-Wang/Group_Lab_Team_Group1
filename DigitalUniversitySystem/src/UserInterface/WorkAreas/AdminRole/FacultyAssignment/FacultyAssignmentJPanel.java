/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.FacultyAssignment;

import University.Business;
import University.Department.Department;
import University.Persona.Faculty.FacultyProfile;
import University.Persona.Faculty.FacultyDirectory;
import University.CourseSchedule.CourseOffer;
import University.CourseCatalog.Course;
import University.CourseSchedule.CourseSchedule;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class FacultyAssignmentJPanel extends javax.swing.JPanel {

    private JPanel CardSequencePanel;
    private Business business;
    private Department department;
    private FacultyDirectory facultyDirectory;
    
    public FacultyAssignmentJPanel(Business b, Department d, JPanel clp) {
        initComponents();
        this.business = b;
        this.department = d;
        this.CardSequencePanel = clp;
        this.facultyDirectory = d.getFacultyDirectory();
        initTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        facultyTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        courseTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        assignmentTable = new javax.swing.JTable();
        assignButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        semesterCombo = new javax.swing.JComboBox<>();
        refreshButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Microsoft YaHei UI", 0, 24)); // NOI18N
        jLabel1.setText("Faculty Course Assignment Management");

        facultyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Name", "Department", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(facultyTable);

        jLabel2.setText("Available Courses:");

        courseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Credits", "Current Faculty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(courseTable);

        jLabel3.setText("Current Assignments:");

        assignmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Faculty", "Course", "Semester", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(assignmentTable);

        assignButton.setText("Assign Faculty to Course");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove Assignment");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Semester:");

        semesterCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fall2024", "Spring2025", "Fall2025" }));
        semesterCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                semesterComboActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backButton)
                        .addGap(18, 18, 18)
                        .addComponent(semesterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(assignButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeButton)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(semesterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshButton)
                    .addComponent(assignButton)
                    .addComponent(removeButton))
                .addContainerGap(20, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        int facultyRow = facultyTable.getSelectedRow();
        int courseRow = courseTable.getSelectedRow();
        
        if (facultyRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a faculty member", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (courseRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a course", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String facultyId = (String) facultyTable.getValueAt(facultyRow, 0);
        String courseId = (String) courseTable.getValueAt(courseRow, 0);
        String semester = (String) semesterCombo.getSelectedItem();
        
        // Find faculty and course
        FacultyProfile faculty = facultyDirectory.findTeachingFaculty(facultyId);
        CourseSchedule courseSchedule = department.getCourseSchedule(semester);
        
        if (faculty == null) {
            JOptionPane.showMessageDialog(this, "Faculty not found", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (courseSchedule == null) {
            JOptionPane.showMessageDialog(this, "Course schedule not found for semester: " + semester, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        CourseOffer courseOffer = courseSchedule.getCourseOfferByNumber(courseId);
        if (courseOffer == null) {
            JOptionPane.showMessageDialog(this, "Course offer not found", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check if already assigned
        if (courseOffer.getFacultyProfile() != null) {
            int result = JOptionPane.showConfirmDialog(this, 
                "This course is already assigned to " + courseOffer.getFacultyProfile().getPerson().getName() + 
                ". Do you want to reassign?", "Reassign Faculty", JOptionPane.YES_NO_OPTION);
            if (result != JOptionPane.YES_OPTION) {
                return;
            }
        }
        
        // Assign faculty to course
        courseOffer.AssignAsTeacher(faculty);
        faculty.assignAsTeacher(courseOffer);
        
        JOptionPane.showMessageDialog(this, "Faculty assigned successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        refreshTables();
    }//GEN-LAST:event_assignButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int assignmentRow = assignmentTable.getSelectedRow();
        
        if (assignmentRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an assignment to remove", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String facultyName = (String) assignmentTable.getValueAt(assignmentRow, 0);
        String courseName = (String) assignmentTable.getValueAt(assignmentRow, 1);
        String semester = (String) assignmentTable.getValueAt(assignmentRow, 2);
        
        int result = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to remove this assignment?", "Confirm Removal", JOptionPane.YES_NO_OPTION);
        
        if (result == JOptionPane.YES_OPTION) {
            // Find and remove assignment
            CourseSchedule courseSchedule = department.getCourseSchedule(semester);
            if (courseSchedule != null) {
                for (CourseOffer co : courseSchedule.getCourseOfferList()) {
                    if (co.getCourseName().equals(courseName) && co.getFacultyProfile() != null && 
                        co.getFacultyProfile().getPerson().getName().equals(facultyName)) {
                        co.AssignAsTeacher(null); // Remove assignment
                        break;
                    }
                }
            }
            
            JOptionPane.showMessageDialog(this, "Assignment removed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            refreshTables();
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        CardSequencePanel.remove(this);
        CardLayout layout = (CardLayout) CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_backButtonActionPerformed

    private void semesterComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_semesterComboActionPerformed
        refreshTables();
    }//GEN-LAST:event_semesterComboActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshTables();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void initTables() {
        refreshTables();
    }
    
    private void refreshTables() {
        refreshFacultyTable();
        refreshCourseTable();
        refreshAssignmentTable();
    }
    
    private void refreshFacultyTable() {
        DefaultTableModel model = (DefaultTableModel) facultyTable.getModel();
        model.setRowCount(0);
        
        if (facultyDirectory != null && facultyDirectory.getTeacherlist() != null) {
            for (FacultyProfile faculty : facultyDirectory.getTeacherlist()) {
                if (faculty != null && faculty.getPerson() != null) {
                    Object[] row = new Object[4];
                    row[0] = faculty.getPerson().getUniversityID();
                    row[1] = faculty.getPerson().getName();
                    row[2] = faculty.getDepartment();
                    row[3] = faculty.getFacultystatus() != null ? faculty.getFacultystatus() : "Active";
                    model.addRow(row);
                }
            }
        }
    }
    
    private void refreshCourseTable() {
        DefaultTableModel model = (DefaultTableModel) courseTable.getModel();
        model.setRowCount(0);
        
        String semester = (String) semesterCombo.getSelectedItem();
        CourseSchedule courseSchedule = department.getCourseSchedule(semester);
        
        if (courseSchedule != null && courseSchedule.getCourseOfferList() != null) {
            for (CourseOffer courseOffer : courseSchedule.getCourseOfferList()) {
                if (courseOffer != null && courseOffer.getCourse() != null) {
                    Object[] row = new Object[4];
                    row[0] = courseOffer.getCourseNumber();
                    row[1] = courseOffer.getCourseName();
                    row[2] = courseOffer.getCourse().getCredits();
                    row[3] = courseOffer.getFacultyProfile() != null ? 
                        courseOffer.getFacultyProfile().getPerson().getName() : "Unassigned";
                    model.addRow(row);
                }
            }
        }
    }
    
    private void refreshAssignmentTable() {
        DefaultTableModel model = (DefaultTableModel) assignmentTable.getModel();
        model.setRowCount(0);
        
        String semester = (String) semesterCombo.getSelectedItem();
        CourseSchedule courseSchedule = department.getCourseSchedule(semester);
        
        if (courseSchedule != null && courseSchedule.getCourseOfferList() != null) {
            for (CourseOffer courseOffer : courseSchedule.getCourseOfferList()) {
                if (courseOffer != null && courseOffer.getFacultyProfile() != null) {
                    Object[] row = new Object[4];
                    row[0] = courseOffer.getFacultyProfile().getPerson().getName();
                    row[1] = courseOffer.getCourseName();
                    row[2] = semester;
                    row[3] = "Active";
                    model.addRow(row);
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable assignmentTable;
    private javax.swing.JButton assignButton;
    private javax.swing.JButton backButton;
    private javax.swing.JTable courseTable;
    private javax.swing.JTable facultyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox<String> semesterCombo;
    // End of variables declaration//GEN-END:variables
}
