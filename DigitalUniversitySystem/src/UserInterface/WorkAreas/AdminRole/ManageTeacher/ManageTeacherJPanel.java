/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManageTeacher;

import University.Persona.Faculty.FacultyProfile;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import University.Persona.Faculty.FacultyDirectory;
import University.Persona.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;

/**
 *
 * @author DELL
 */
public class ManageTeacherJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageTeacherJPanel
     */
     private JPanel MainMenu;              
     private FacultyDirectory facultyDirectory; 
      private UserAccount useraccount;
 
    public ManageTeacherJPanel(JPanel mainPanel, FacultyDirectory facultyDirectory, UserAccount useraccount) {
        initComponents();
        this.MainMenu = mainPanel;
        this.facultyDirectory = facultyDirectory;
        this.useraccount = useraccount;
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FacultyTbl = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        fieldSearch = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 204, 204));

        FacultyTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Email", "Department", "Telephone"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(FacultyTbl);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDelete)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnView)
                                .addGap(204, 204, 204)
                                .addComponent(btnSearch)
                                .addGap(74, 74, 74)
                                .addComponent(fieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnView)
                            .addComponent(btnSearch)
                            .addComponent(fieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)))
                .addComponent(btnDelete)
                .addContainerGap(34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        MainMenu.remove(this);
        CardLayout layout = (CardLayout) MainMenu.getLayout();
        layout.previous(MainMenu);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = FacultyTbl.getSelectedRow();

if (selectedRow >= 0) {
    String id = (String) FacultyTbl.getValueAt(selectedRow, 0);

    FacultyProfile selected = facultyDirectory.findTeachingFaculty(id);
    if (selected != null) {
        ViewTeacher panel = new ViewTeacher(MainMenu, selected,useraccount);
        MainMenu.add("ViewFaculty", panel);
        CardLayout layout = (CardLayout) MainMenu.getLayout();
        layout.next(MainMenu);
    } else {
        JOptionPane.showMessageDialog(this,
                "Faculty not found!",
                "Error",
                JOptionPane.ERROR_MESSAGE);
    }
} else {
    JOptionPane.showMessageDialog(this,
            "Please select a faculty member",
            "Warning",
            JOptionPane.WARNING_MESSAGE);
}

    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        
        int selectedRow = FacultyTbl.getSelectedRow();

if (selectedRow >= 0) {
    int dialogResult = JOptionPane.showConfirmDialog(this,
            "Are you sure to delete the Faculty?",
            "Confirm Delete",
            JOptionPane.YES_NO_OPTION);

    if (dialogResult == JOptionPane.YES_OPTION) {
        String id = (String) FacultyTbl.getValueAt(selectedRow, 0);
        FacultyProfile selected = facultyDirectory.findTeachingFaculty(id);

        if (selected != null) {
            facultyDirectory.deleteFaculty(selected); // 调用删除方法
            initTable(); // 刷新表格
            JOptionPane.showMessageDialog(this, "Faculty deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Faculty not found!");
        }
    }
} else {
    JOptionPane.showMessageDialog(this, "Please select a faculty member to delete!");
}

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        performSearch();
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FacultyTbl;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnView;
    private javax.swing.JTextField fieldSearch;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables



 private void initTable() {
         DefaultTableModel model = (DefaultTableModel) FacultyTbl.getModel();
         model.setRowCount(0);

         // Add null check to prevent NullPointerException
         if (facultyDirectory != null && facultyDirectory.getTeacherlist() != null) {
             for (FacultyProfile sp : facultyDirectory.getTeacherlist()) {
                 if (sp != null && sp.getPerson() != null) {
                     Object[] row = new Object[5]; 
                     row[0] = sp.getPerson().getUniversityID();
                     row[1] = sp.getPerson().getName();
                     row[2] = sp.getPerson().getEmail();
                     row[3] = sp.getDepartment();
                     row[4] = sp.getTelephone();
                     model.addRow(row);
                 }
             }
         }
    }
    
    private void performSearch() {
        String searchText = fieldSearch.getText().trim();
        
        // If search text is empty, show all faculty
        if (searchText.isEmpty()) {
            initTable();
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) FacultyTbl.getModel();
        model.setRowCount(0);
        
        if (facultyDirectory != null && facultyDirectory.getTeacherlist() != null) {
            boolean found = false;
            for (FacultyProfile sp : facultyDirectory.getTeacherlist()) {
                if (sp != null && sp.getPerson() != null) {
                    String facultyId = sp.getPerson().getUniversityID();
                    String facultyName = sp.getPerson().getName();
                    String department = sp.getDepartment();
                    
                    // Search by ID (exact match), name (partial match), or department (partial match)
                    if (facultyId.equalsIgnoreCase(searchText) || 
                        facultyName.toLowerCase().contains(searchText.toLowerCase()) ||
                        (department != null && department.toLowerCase().contains(searchText.toLowerCase()))) {
                        
                        Object[] row = new Object[5]; 
                        row[0] = sp.getPerson().getUniversityID();
                        row[1] = sp.getPerson().getName();
                        row[2] = sp.getPerson().getEmail();
                        row[3] = sp.getDepartment();
                        row[4] = sp.getTelephone();
                        model.addRow(row);
                        found = true;
                    }
                }
            }
            
            if (!found) {
                JOptionPane.showMessageDialog(this, 
                    "No faculty found matching: " + searchText, 
                    "Search Result", 
                    JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }
}
